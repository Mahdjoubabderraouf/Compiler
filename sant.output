Nonterminals useless in grammar

    ListeRestRest


Terminals unused in grammar

    mcELSE
    Fonction_i
    or
    aro
    INTEGERPOSITIF
    INTEGERNEGATIF
    commantaire
    REALNEGATIF
    REALPOSITIF
    UNARY_OPERATOR


Rules useless in grammar

   79 ListeRestRest: virgule identificateur ListeRestRest
   80              | ε


State 54 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce


Grammar

    0 $accept: Fonction $end

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction
    2         | Programme_pr

    3 Programme_pr: mcPROGRAM DECLARATIONS INSTR mcEND

    4 DECLARATIONS: type identificateur DECLARATIONS1

    5 DECLARATIONS1: point_virgule
    6              | virgule identificateur DECLARATIONS1
    7              | TABLEAU
    8              | MATRICE
    9              | ε

   10 TABLEAU: mcDIMENSION DIMENSIONTAB DIMENSION_REST

   11 MATRICE: mcDIMENSION DIMENSIONMAT DIMENSION_REST

   12 DIMENSION_REST: virgule identificateur DECLARATIONS1
   13               | ε

   14 type: mcINTEGER
   15     | mcLOGICAL
   16     | mcREAL
   17     | mcCHARACTER

   18 INSTR: Affectation
   19      | ES
   20      | Condition
   21      | Boucle
   22      | Appel
   23      | Equivalence

   24 Affectation: identificateur eq EXPR

   25 EXPR: CHAINE_STRING
   26     | MATH_VAR
   27     | APPEL_FONC
   28     | LOGIQUE point_virgule

   29 APPEL_FONC: mcCALL identificateur paraO Liste point_virgule

   30 MATH_VAR: IDFI MATH_VAR1

   31 IDFI: identificateur GRA
   32     | INTEGER
   33     | REAL

   34 GRA: DIMENSIONMAT
   35    | DIMENSIONTAB
   36    | ε

   37 MATH_VAR1: OPER IDFI MATH_VAR1
   38          | point_virgule

   39 CHAINE_STRING: IDFI_CHAR CHAINE_STRING1

   40 CHAINE_STRING1: OPER IDFI_CHAR CHAINE_STRING1
   41               | point_virgule

   42 IDFI_CHAR: chaine
   43          | caracter

   44 LOGIQUE: mcTRUE
   45        | mcFALSE

   46 ES: mcREAD paraO identificateur paraF point_virgule
   47   | mcWRITE paraO chaine virgule Liste virgule chaine paraF point_virgule

   48 Condition: mcIF paraO EXPR_CONDI paraF mcTHEN INSTR mcENDIF

   49 Boucle: mcDOWHILE paraO EXPR_CONDI paraF INSTR mcENDO

   50 Appel: identificateur mcROUTINE paraO Liste paraF point_virgule

   51 Equivalence: PartageMemoire paraO Liste paraF virgule paraO Liste paraF point_virgule

   52 EXPR_CONDI: EXPR_CONDI_TYPE EXPR_CONDI_SUITE

   53 EXPR_CONDI_TYPE: identificateur
   54                | mcTRUE
   55                | mcFALSE
   56                | INTEGER
   57                | REAL
   58                | paraO EXPR_CONDI paraF

   59 EXPR_CONDI_SUITE: EXPR_CONDI_OP EXPR_CONDI_TYPE EXPR_CONDI_SUITE
   60                 | point_virgule
   61                 | ε

   62 EXPR_CONDI_OP: OR
   63              | AND
   64              | GT
   65              | GE
   66              | EQ
   67              | NE
   68              | LE
   69              | LT
   70              | paraO EXPR_CONDI paraF
   71              | OPER

   72 Liste: identificateur ListeRest

   73 ListeRest: virgule identificateur ListeRest
   74          | ε

   75 OPER: plus
   76     | mpins
   77     | etoile
   78     | division


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    mcTRUE (258) 44 54
    mcFALSE (259) 45 55
    mcINTEGER (260) 14
    mcREAL (261) 16
    mcCHARACTER (262) 17
    mcLOGICAL (263) 15
    mcREAD (264) 46
    mcWRITE (265) 47
    mcDIMENSION (266) 10 11
    mcPROGRAM (267) 3
    mcEND (268) 3
    mcROUTINE (269) 1 50
    mcENDR (270) 1
    mcCALL (271) 29
    mcIF (272) 48
    mcTHEN (273) 48
    mcELSE (274)
    mcENDIF (275) 48
    mcDOWHILE (276) 49
    mcENDO (277) 49
    PartageMemoire (278) 51
    OR (279) 62
    AND (280) 63
    GT (281) 64
    EQ (282) 66
    GE (283) 65
    NE (284) 67
    LE (285) 68
    LT (286) 69
    Fonction_i (287)
    eq (288) 1 24
    point_virgule (289) 5 28 29 38 41 46 47 50 51 60
    plus (290) 75
    mpins (291) 76
    division (292) 78
    or (293)
    aro (294)
    etoile (295) 77
    virgule (296) 6 12 47 51 73
    paraO (297) 1 29 46 47 48 49 50 51 58 70
    paraF (298) 46 47 48 49 50 51 58 70
    DIMENSIONTAB (299) 10 35
    DIMENSIONMAT (300) 11 34
    identificateur (301) 1 4 6 12 24 29 31 46 50 53 72 73
    INTEGER (302) 1 32 56
    INTEGERPOSITIF (303)
    INTEGERNEGATIF (304)
    REAL (305) 33 57
    caracter (306) 43
    chaine (307) 42 47
    commantaire (308)
    REALNEGATIF (309)
    REALPOSITIF (310)
    UNARY_OPERATOR (311)


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    Fonction (58)
        on left: 1 2
        on right: 0 1
    Programme_pr (59)
        on left: 3
        on right: 2
    DECLARATIONS (60)
        on left: 4
        on right: 1 3
    DECLARATIONS1 (61)
        on left: 5 6 7 8 9
        on right: 4 6 12
    TABLEAU (62)
        on left: 10
        on right: 7
    MATRICE (63)
        on left: 11
        on right: 8
    DIMENSION_REST (64)
        on left: 12 13
        on right: 10 11
    type (65)
        on left: 14 15 16 17
        on right: 1 4
    INSTR (66)
        on left: 18 19 20 21 22 23
        on right: 1 3 48 49
    Affectation (67)
        on left: 24
        on right: 18
    EXPR (68)
        on left: 25 26 27 28
        on right: 24
    APPEL_FONC (69)
        on left: 29
        on right: 27
    MATH_VAR (70)
        on left: 30
        on right: 26
    IDFI (71)
        on left: 31 32 33
        on right: 30 37
    GRA (72)
        on left: 34 35 36
        on right: 31
    MATH_VAR1 (73)
        on left: 37 38
        on right: 30 37
    CHAINE_STRING (74)
        on left: 39
        on right: 25
    CHAINE_STRING1 (75)
        on left: 40 41
        on right: 39 40
    IDFI_CHAR (76)
        on left: 42 43
        on right: 39 40
    LOGIQUE (77)
        on left: 44 45
        on right: 28
    ES (78)
        on left: 46 47
        on right: 19
    Condition (79)
        on left: 48
        on right: 20
    Boucle (80)
        on left: 49
        on right: 21
    Appel (81)
        on left: 50
        on right: 22
    Equivalence (82)
        on left: 51
        on right: 23
    EXPR_CONDI (83)
        on left: 52
        on right: 48 49 58 70
    EXPR_CONDI_TYPE (84)
        on left: 53 54 55 56 57 58
        on right: 52 59
    EXPR_CONDI_SUITE (85)
        on left: 59 60 61
        on right: 52 59
    EXPR_CONDI_OP (86)
        on left: 62 63 64 65 66 67 68 69 70 71
        on right: 59
    Liste (87)
        on left: 72
        on right: 1 29 47 50 51
    ListeRest (88)
        on left: 73 74
        on right: 72 73
    OPER (89)
        on left: 75 76 77 78
        on right: 37 40 71


State 0

    0 $accept: • Fonction $end

    mcINTEGER    shift, and go to state 1
    mcREAL       shift, and go to state 2
    mcCHARACTER  shift, and go to state 3
    mcLOGICAL    shift, and go to state 4
    mcPROGRAM    shift, and go to state 5

    Fonction      go to state 6
    Programme_pr  go to state 7
    type          go to state 8


State 1

   14 type: mcINTEGER •

    $default  reduce using rule 14 (type)


State 2

   16 type: mcREAL •

    $default  reduce using rule 16 (type)


State 3

   17 type: mcCHARACTER •

    $default  reduce using rule 17 (type)


State 4

   15 type: mcLOGICAL •

    $default  reduce using rule 15 (type)


State 5

    3 Programme_pr: mcPROGRAM • DECLARATIONS INSTR mcEND

    mcINTEGER    shift, and go to state 1
    mcREAL       shift, and go to state 2
    mcCHARACTER  shift, and go to state 3
    mcLOGICAL    shift, and go to state 4

    DECLARATIONS  go to state 9
    type          go to state 10


State 6

    0 $accept: Fonction • $end

    $end  shift, and go to state 11


State 7

    2 Fonction: Programme_pr •

    $default  reduce using rule 2 (Fonction)


State 8

    1 Fonction: type • mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction

    mcROUTINE  shift, and go to state 12


State 9

    3 Programme_pr: mcPROGRAM DECLARATIONS • INSTR mcEND

    mcREAD          shift, and go to state 13
    mcWRITE         shift, and go to state 14
    mcIF            shift, and go to state 15
    mcDOWHILE       shift, and go to state 16
    PartageMemoire  shift, and go to state 17
    identificateur  shift, and go to state 18

    INSTR        go to state 19
    Affectation  go to state 20
    ES           go to state 21
    Condition    go to state 22
    Boucle       go to state 23
    Appel        go to state 24
    Equivalence  go to state 25


State 10

    4 DECLARATIONS: type • identificateur DECLARATIONS1

    identificateur  shift, and go to state 26


State 11

    0 $accept: Fonction $end •

    $default  accept


State 12

    1 Fonction: type mcROUTINE • identificateur paraO Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction

    identificateur  shift, and go to state 27


State 13

   46 ES: mcREAD • paraO identificateur paraF point_virgule

    paraO  shift, and go to state 28


State 14

   47 ES: mcWRITE • paraO chaine virgule Liste virgule chaine paraF point_virgule

    paraO  shift, and go to state 29


State 15

   48 Condition: mcIF • paraO EXPR_CONDI paraF mcTHEN INSTR mcENDIF

    paraO  shift, and go to state 30


State 16

   49 Boucle: mcDOWHILE • paraO EXPR_CONDI paraF INSTR mcENDO

    paraO  shift, and go to state 31


State 17

   51 Equivalence: PartageMemoire • paraO Liste paraF virgule paraO Liste paraF point_virgule

    paraO  shift, and go to state 32


State 18

   24 Affectation: identificateur • eq EXPR
   50 Appel: identificateur • mcROUTINE paraO Liste paraF point_virgule

    mcROUTINE  shift, and go to state 33
    eq         shift, and go to state 34


State 19

    3 Programme_pr: mcPROGRAM DECLARATIONS INSTR • mcEND

    mcEND  shift, and go to state 35


State 20

   18 INSTR: Affectation •

    $default  reduce using rule 18 (INSTR)


State 21

   19 INSTR: ES •

    $default  reduce using rule 19 (INSTR)


State 22

   20 INSTR: Condition •

    $default  reduce using rule 20 (INSTR)


State 23

   21 INSTR: Boucle •

    $default  reduce using rule 21 (INSTR)


State 24

   22 INSTR: Appel •

    $default  reduce using rule 22 (INSTR)


State 25

   23 INSTR: Equivalence •

    $default  reduce using rule 23 (INSTR)


State 26

    4 DECLARATIONS: type identificateur • DECLARATIONS1

    mcDIMENSION    shift, and go to state 36
    point_virgule  shift, and go to state 37
    virgule        shift, and go to state 38

    $default  reduce using rule 9 (DECLARATIONS1)

    DECLARATIONS1  go to state 39
    TABLEAU        go to state 40
    MATRICE        go to state 41


State 27

    1 Fonction: type mcROUTINE identificateur • paraO Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction

    paraO  shift, and go to state 42


State 28

   46 ES: mcREAD paraO • identificateur paraF point_virgule

    identificateur  shift, and go to state 43


State 29

   47 ES: mcWRITE paraO • chaine virgule Liste virgule chaine paraF point_virgule

    chaine  shift, and go to state 44


State 30

   48 Condition: mcIF paraO • EXPR_CONDI paraF mcTHEN INSTR mcENDIF

    mcTRUE          shift, and go to state 45
    mcFALSE         shift, and go to state 46
    paraO           shift, and go to state 47
    identificateur  shift, and go to state 48
    INTEGER         shift, and go to state 49
    REAL            shift, and go to state 50

    EXPR_CONDI       go to state 51
    EXPR_CONDI_TYPE  go to state 52


State 31

   49 Boucle: mcDOWHILE paraO • EXPR_CONDI paraF INSTR mcENDO

    mcTRUE          shift, and go to state 45
    mcFALSE         shift, and go to state 46
    paraO           shift, and go to state 47
    identificateur  shift, and go to state 48
    INTEGER         shift, and go to state 49
    REAL            shift, and go to state 50

    EXPR_CONDI       go to state 53
    EXPR_CONDI_TYPE  go to state 52


State 32

   51 Equivalence: PartageMemoire paraO • Liste paraF virgule paraO Liste paraF point_virgule

    identificateur  shift, and go to state 54

    Liste  go to state 55


State 33

   50 Appel: identificateur mcROUTINE • paraO Liste paraF point_virgule

    paraO  shift, and go to state 56


State 34

   24 Affectation: identificateur eq • EXPR

    mcTRUE          shift, and go to state 57
    mcFALSE         shift, and go to state 58
    mcCALL          shift, and go to state 59
    identificateur  shift, and go to state 60
    INTEGER         shift, and go to state 61
    REAL            shift, and go to state 62
    caracter        shift, and go to state 63
    chaine          shift, and go to state 64

    EXPR           go to state 65
    APPEL_FONC     go to state 66
    MATH_VAR       go to state 67
    IDFI           go to state 68
    CHAINE_STRING  go to state 69
    IDFI_CHAR      go to state 70
    LOGIQUE        go to state 71


State 35

    3 Programme_pr: mcPROGRAM DECLARATIONS INSTR mcEND •

    $default  reduce using rule 3 (Programme_pr)


State 36

   10 TABLEAU: mcDIMENSION • DIMENSIONTAB DIMENSION_REST
   11 MATRICE: mcDIMENSION • DIMENSIONMAT DIMENSION_REST

    DIMENSIONTAB  shift, and go to state 72
    DIMENSIONMAT  shift, and go to state 73


State 37

    5 DECLARATIONS1: point_virgule •

    $default  reduce using rule 5 (DECLARATIONS1)


State 38

    6 DECLARATIONS1: virgule • identificateur DECLARATIONS1

    identificateur  shift, and go to state 74


State 39

    4 DECLARATIONS: type identificateur DECLARATIONS1 •

    $default  reduce using rule 4 (DECLARATIONS)


State 40

    7 DECLARATIONS1: TABLEAU •

    $default  reduce using rule 7 (DECLARATIONS1)


State 41

    8 DECLARATIONS1: MATRICE •

    $default  reduce using rule 8 (DECLARATIONS1)


State 42

    1 Fonction: type mcROUTINE identificateur paraO • Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction

    identificateur  shift, and go to state 54

    Liste  go to state 75


State 43

   46 ES: mcREAD paraO identificateur • paraF point_virgule

    paraF  shift, and go to state 76


State 44

   47 ES: mcWRITE paraO chaine • virgule Liste virgule chaine paraF point_virgule

    virgule  shift, and go to state 77


State 45

   54 EXPR_CONDI_TYPE: mcTRUE •

    $default  reduce using rule 54 (EXPR_CONDI_TYPE)


State 46

   55 EXPR_CONDI_TYPE: mcFALSE •

    $default  reduce using rule 55 (EXPR_CONDI_TYPE)


State 47

   58 EXPR_CONDI_TYPE: paraO • EXPR_CONDI paraF

    mcTRUE          shift, and go to state 45
    mcFALSE         shift, and go to state 46
    paraO           shift, and go to state 47
    identificateur  shift, and go to state 48
    INTEGER         shift, and go to state 49
    REAL            shift, and go to state 50

    EXPR_CONDI       go to state 78
    EXPR_CONDI_TYPE  go to state 52


State 48

   53 EXPR_CONDI_TYPE: identificateur •

    $default  reduce using rule 53 (EXPR_CONDI_TYPE)


State 49

   56 EXPR_CONDI_TYPE: INTEGER •

    $default  reduce using rule 56 (EXPR_CONDI_TYPE)


State 50

   57 EXPR_CONDI_TYPE: REAL •

    $default  reduce using rule 57 (EXPR_CONDI_TYPE)


State 51

   48 Condition: mcIF paraO EXPR_CONDI • paraF mcTHEN INSTR mcENDIF

    paraF  shift, and go to state 79


State 52

   52 EXPR_CONDI: EXPR_CONDI_TYPE • EXPR_CONDI_SUITE

    OR             shift, and go to state 80
    AND            shift, and go to state 81
    GT             shift, and go to state 82
    EQ             shift, and go to state 83
    GE             shift, and go to state 84
    NE             shift, and go to state 85
    LE             shift, and go to state 86
    LT             shift, and go to state 87
    point_virgule  shift, and go to state 88
    plus           shift, and go to state 89
    mpins          shift, and go to state 90
    division       shift, and go to state 91
    etoile         shift, and go to state 92
    paraO          shift, and go to state 93

    $default  reduce using rule 61 (EXPR_CONDI_SUITE)

    EXPR_CONDI_SUITE  go to state 94
    EXPR_CONDI_OP     go to state 95
    OPER              go to state 96


State 53

   49 Boucle: mcDOWHILE paraO EXPR_CONDI • paraF INSTR mcENDO

    paraF  shift, and go to state 97


State 54

   72 Liste: identificateur • ListeRest

    virgule  shift, and go to state 98

    virgule   [reduce using rule 74 (ListeRest)]
    $default  reduce using rule 74 (ListeRest)

    ListeRest  go to state 99


State 55

   51 Equivalence: PartageMemoire paraO Liste • paraF virgule paraO Liste paraF point_virgule

    paraF  shift, and go to state 100


State 56

   50 Appel: identificateur mcROUTINE paraO • Liste paraF point_virgule

    identificateur  shift, and go to state 54

    Liste  go to state 101


State 57

   44 LOGIQUE: mcTRUE •

    $default  reduce using rule 44 (LOGIQUE)


State 58

   45 LOGIQUE: mcFALSE •

    $default  reduce using rule 45 (LOGIQUE)


State 59

   29 APPEL_FONC: mcCALL • identificateur paraO Liste point_virgule

    identificateur  shift, and go to state 102


State 60

   31 IDFI: identificateur • GRA

    DIMENSIONTAB  shift, and go to state 103
    DIMENSIONMAT  shift, and go to state 104

    $default  reduce using rule 36 (GRA)

    GRA  go to state 105


State 61

   32 IDFI: INTEGER •

    $default  reduce using rule 32 (IDFI)


State 62

   33 IDFI: REAL •

    $default  reduce using rule 33 (IDFI)


State 63

   43 IDFI_CHAR: caracter •

    $default  reduce using rule 43 (IDFI_CHAR)


State 64

   42 IDFI_CHAR: chaine •

    $default  reduce using rule 42 (IDFI_CHAR)


State 65

   24 Affectation: identificateur eq EXPR •

    $default  reduce using rule 24 (Affectation)


State 66

   27 EXPR: APPEL_FONC •

    $default  reduce using rule 27 (EXPR)


State 67

   26 EXPR: MATH_VAR •

    $default  reduce using rule 26 (EXPR)


State 68

   30 MATH_VAR: IDFI • MATH_VAR1

    point_virgule  shift, and go to state 106
    plus           shift, and go to state 89
    mpins          shift, and go to state 90
    division       shift, and go to state 91
    etoile         shift, and go to state 92

    MATH_VAR1  go to state 107
    OPER       go to state 108


State 69

   25 EXPR: CHAINE_STRING •

    $default  reduce using rule 25 (EXPR)


State 70

   39 CHAINE_STRING: IDFI_CHAR • CHAINE_STRING1

    point_virgule  shift, and go to state 109
    plus           shift, and go to state 89
    mpins          shift, and go to state 90
    division       shift, and go to state 91
    etoile         shift, and go to state 92

    CHAINE_STRING1  go to state 110
    OPER            go to state 111


State 71

   28 EXPR: LOGIQUE • point_virgule

    point_virgule  shift, and go to state 112


State 72

   10 TABLEAU: mcDIMENSION DIMENSIONTAB • DIMENSION_REST

    virgule  shift, and go to state 113

    $default  reduce using rule 13 (DIMENSION_REST)

    DIMENSION_REST  go to state 114


State 73

   11 MATRICE: mcDIMENSION DIMENSIONMAT • DIMENSION_REST

    virgule  shift, and go to state 113

    $default  reduce using rule 13 (DIMENSION_REST)

    DIMENSION_REST  go to state 115


State 74

    6 DECLARATIONS1: virgule identificateur • DECLARATIONS1

    mcDIMENSION    shift, and go to state 36
    point_virgule  shift, and go to state 37
    virgule        shift, and go to state 38

    $default  reduce using rule 9 (DECLARATIONS1)

    DECLARATIONS1  go to state 116
    TABLEAU        go to state 40
    MATRICE        go to state 41


State 75

    1 Fonction: type mcROUTINE identificateur paraO Liste • DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction

    mcINTEGER    shift, and go to state 1
    mcREAL       shift, and go to state 2
    mcCHARACTER  shift, and go to state 3
    mcLOGICAL    shift, and go to state 4

    DECLARATIONS  go to state 117
    type          go to state 10


State 76

   46 ES: mcREAD paraO identificateur paraF • point_virgule

    point_virgule  shift, and go to state 118


State 77

   47 ES: mcWRITE paraO chaine virgule • Liste virgule chaine paraF point_virgule

    identificateur  shift, and go to state 54

    Liste  go to state 119


State 78

   58 EXPR_CONDI_TYPE: paraO EXPR_CONDI • paraF

    paraF  shift, and go to state 120


State 79

   48 Condition: mcIF paraO EXPR_CONDI paraF • mcTHEN INSTR mcENDIF

    mcTHEN  shift, and go to state 121


State 80

   62 EXPR_CONDI_OP: OR •

    $default  reduce using rule 62 (EXPR_CONDI_OP)


State 81

   63 EXPR_CONDI_OP: AND •

    $default  reduce using rule 63 (EXPR_CONDI_OP)


State 82

   64 EXPR_CONDI_OP: GT •

    $default  reduce using rule 64 (EXPR_CONDI_OP)


State 83

   66 EXPR_CONDI_OP: EQ •

    $default  reduce using rule 66 (EXPR_CONDI_OP)


State 84

   65 EXPR_CONDI_OP: GE •

    $default  reduce using rule 65 (EXPR_CONDI_OP)


State 85

   67 EXPR_CONDI_OP: NE •

    $default  reduce using rule 67 (EXPR_CONDI_OP)


State 86

   68 EXPR_CONDI_OP: LE •

    $default  reduce using rule 68 (EXPR_CONDI_OP)


State 87

   69 EXPR_CONDI_OP: LT •

    $default  reduce using rule 69 (EXPR_CONDI_OP)


State 88

   60 EXPR_CONDI_SUITE: point_virgule •

    $default  reduce using rule 60 (EXPR_CONDI_SUITE)


State 89

   75 OPER: plus •

    $default  reduce using rule 75 (OPER)


State 90

   76 OPER: mpins •

    $default  reduce using rule 76 (OPER)


State 91

   78 OPER: division •

    $default  reduce using rule 78 (OPER)


State 92

   77 OPER: etoile •

    $default  reduce using rule 77 (OPER)


State 93

   70 EXPR_CONDI_OP: paraO • EXPR_CONDI paraF

    mcTRUE          shift, and go to state 45
    mcFALSE         shift, and go to state 46
    paraO           shift, and go to state 47
    identificateur  shift, and go to state 48
    INTEGER         shift, and go to state 49
    REAL            shift, and go to state 50

    EXPR_CONDI       go to state 122
    EXPR_CONDI_TYPE  go to state 52


State 94

   52 EXPR_CONDI: EXPR_CONDI_TYPE EXPR_CONDI_SUITE •

    $default  reduce using rule 52 (EXPR_CONDI)


State 95

   59 EXPR_CONDI_SUITE: EXPR_CONDI_OP • EXPR_CONDI_TYPE EXPR_CONDI_SUITE

    mcTRUE          shift, and go to state 45
    mcFALSE         shift, and go to state 46
    paraO           shift, and go to state 47
    identificateur  shift, and go to state 48
    INTEGER         shift, and go to state 49
    REAL            shift, and go to state 50

    EXPR_CONDI_TYPE  go to state 123


State 96

   71 EXPR_CONDI_OP: OPER •

    $default  reduce using rule 71 (EXPR_CONDI_OP)


State 97

   49 Boucle: mcDOWHILE paraO EXPR_CONDI paraF • INSTR mcENDO

    mcREAD          shift, and go to state 13
    mcWRITE         shift, and go to state 14
    mcIF            shift, and go to state 15
    mcDOWHILE       shift, and go to state 16
    PartageMemoire  shift, and go to state 17
    identificateur  shift, and go to state 18

    INSTR        go to state 124
    Affectation  go to state 20
    ES           go to state 21
    Condition    go to state 22
    Boucle       go to state 23
    Appel        go to state 24
    Equivalence  go to state 25


State 98

   73 ListeRest: virgule • identificateur ListeRest

    identificateur  shift, and go to state 125


State 99

   72 Liste: identificateur ListeRest •

    $default  reduce using rule 72 (Liste)


State 100

   51 Equivalence: PartageMemoire paraO Liste paraF • virgule paraO Liste paraF point_virgule

    virgule  shift, and go to state 126


State 101

   50 Appel: identificateur mcROUTINE paraO Liste • paraF point_virgule

    paraF  shift, and go to state 127


State 102

   29 APPEL_FONC: mcCALL identificateur • paraO Liste point_virgule

    paraO  shift, and go to state 128


State 103

   35 GRA: DIMENSIONTAB •

    $default  reduce using rule 35 (GRA)


State 104

   34 GRA: DIMENSIONMAT •

    $default  reduce using rule 34 (GRA)


State 105

   31 IDFI: identificateur GRA •

    $default  reduce using rule 31 (IDFI)


State 106

   38 MATH_VAR1: point_virgule •

    $default  reduce using rule 38 (MATH_VAR1)


State 107

   30 MATH_VAR: IDFI MATH_VAR1 •

    $default  reduce using rule 30 (MATH_VAR)


State 108

   37 MATH_VAR1: OPER • IDFI MATH_VAR1

    identificateur  shift, and go to state 60
    INTEGER         shift, and go to state 61
    REAL            shift, and go to state 62

    IDFI  go to state 129


State 109

   41 CHAINE_STRING1: point_virgule •

    $default  reduce using rule 41 (CHAINE_STRING1)


State 110

   39 CHAINE_STRING: IDFI_CHAR CHAINE_STRING1 •

    $default  reduce using rule 39 (CHAINE_STRING)


State 111

   40 CHAINE_STRING1: OPER • IDFI_CHAR CHAINE_STRING1

    caracter  shift, and go to state 63
    chaine    shift, and go to state 64

    IDFI_CHAR  go to state 130


State 112

   28 EXPR: LOGIQUE point_virgule •

    $default  reduce using rule 28 (EXPR)


State 113

   12 DIMENSION_REST: virgule • identificateur DECLARATIONS1

    identificateur  shift, and go to state 131


State 114

   10 TABLEAU: mcDIMENSION DIMENSIONTAB DIMENSION_REST •

    $default  reduce using rule 10 (TABLEAU)


State 115

   11 MATRICE: mcDIMENSION DIMENSIONMAT DIMENSION_REST •

    $default  reduce using rule 11 (MATRICE)


State 116

    6 DECLARATIONS1: virgule identificateur DECLARATIONS1 •

    $default  reduce using rule 6 (DECLARATIONS1)


State 117

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS • INSTR identificateur eq INTEGER mcENDR Fonction

    mcREAD          shift, and go to state 13
    mcWRITE         shift, and go to state 14
    mcIF            shift, and go to state 15
    mcDOWHILE       shift, and go to state 16
    PartageMemoire  shift, and go to state 17
    identificateur  shift, and go to state 18

    INSTR        go to state 132
    Affectation  go to state 20
    ES           go to state 21
    Condition    go to state 22
    Boucle       go to state 23
    Appel        go to state 24
    Equivalence  go to state 25


State 118

   46 ES: mcREAD paraO identificateur paraF point_virgule •

    $default  reduce using rule 46 (ES)


State 119

   47 ES: mcWRITE paraO chaine virgule Liste • virgule chaine paraF point_virgule

    virgule  shift, and go to state 133


State 120

   58 EXPR_CONDI_TYPE: paraO EXPR_CONDI paraF •

    $default  reduce using rule 58 (EXPR_CONDI_TYPE)


State 121

   48 Condition: mcIF paraO EXPR_CONDI paraF mcTHEN • INSTR mcENDIF

    mcREAD          shift, and go to state 13
    mcWRITE         shift, and go to state 14
    mcIF            shift, and go to state 15
    mcDOWHILE       shift, and go to state 16
    PartageMemoire  shift, and go to state 17
    identificateur  shift, and go to state 18

    INSTR        go to state 134
    Affectation  go to state 20
    ES           go to state 21
    Condition    go to state 22
    Boucle       go to state 23
    Appel        go to state 24
    Equivalence  go to state 25


State 122

   70 EXPR_CONDI_OP: paraO EXPR_CONDI • paraF

    paraF  shift, and go to state 135


State 123

   59 EXPR_CONDI_SUITE: EXPR_CONDI_OP EXPR_CONDI_TYPE • EXPR_CONDI_SUITE

    OR             shift, and go to state 80
    AND            shift, and go to state 81
    GT             shift, and go to state 82
    EQ             shift, and go to state 83
    GE             shift, and go to state 84
    NE             shift, and go to state 85
    LE             shift, and go to state 86
    LT             shift, and go to state 87
    point_virgule  shift, and go to state 88
    plus           shift, and go to state 89
    mpins          shift, and go to state 90
    division       shift, and go to state 91
    etoile         shift, and go to state 92
    paraO          shift, and go to state 93

    $default  reduce using rule 61 (EXPR_CONDI_SUITE)

    EXPR_CONDI_SUITE  go to state 136
    EXPR_CONDI_OP     go to state 95
    OPER              go to state 96


State 124

   49 Boucle: mcDOWHILE paraO EXPR_CONDI paraF INSTR • mcENDO

    mcENDO  shift, and go to state 137


State 125

   73 ListeRest: virgule identificateur • ListeRest

    virgule  shift, and go to state 98

    virgule   [reduce using rule 74 (ListeRest)]
    $default  reduce using rule 74 (ListeRest)

    ListeRest  go to state 138


State 126

   51 Equivalence: PartageMemoire paraO Liste paraF virgule • paraO Liste paraF point_virgule

    paraO  shift, and go to state 139


State 127

   50 Appel: identificateur mcROUTINE paraO Liste paraF • point_virgule

    point_virgule  shift, and go to state 140


State 128

   29 APPEL_FONC: mcCALL identificateur paraO • Liste point_virgule

    identificateur  shift, and go to state 54

    Liste  go to state 141


State 129

   37 MATH_VAR1: OPER IDFI • MATH_VAR1

    point_virgule  shift, and go to state 106
    plus           shift, and go to state 89
    mpins          shift, and go to state 90
    division       shift, and go to state 91
    etoile         shift, and go to state 92

    MATH_VAR1  go to state 142
    OPER       go to state 108


State 130

   40 CHAINE_STRING1: OPER IDFI_CHAR • CHAINE_STRING1

    point_virgule  shift, and go to state 109
    plus           shift, and go to state 89
    mpins          shift, and go to state 90
    division       shift, and go to state 91
    etoile         shift, and go to state 92

    CHAINE_STRING1  go to state 143
    OPER            go to state 111


State 131

   12 DIMENSION_REST: virgule identificateur • DECLARATIONS1

    mcDIMENSION    shift, and go to state 36
    point_virgule  shift, and go to state 37
    virgule        shift, and go to state 38

    $default  reduce using rule 9 (DECLARATIONS1)

    DECLARATIONS1  go to state 144
    TABLEAU        go to state 40
    MATRICE        go to state 41


State 132

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR • identificateur eq INTEGER mcENDR Fonction

    identificateur  shift, and go to state 145


State 133

   47 ES: mcWRITE paraO chaine virgule Liste virgule • chaine paraF point_virgule

    chaine  shift, and go to state 146


State 134

   48 Condition: mcIF paraO EXPR_CONDI paraF mcTHEN INSTR • mcENDIF

    mcENDIF  shift, and go to state 147


State 135

   70 EXPR_CONDI_OP: paraO EXPR_CONDI paraF •

    $default  reduce using rule 70 (EXPR_CONDI_OP)


State 136

   59 EXPR_CONDI_SUITE: EXPR_CONDI_OP EXPR_CONDI_TYPE EXPR_CONDI_SUITE •

    $default  reduce using rule 59 (EXPR_CONDI_SUITE)


State 137

   49 Boucle: mcDOWHILE paraO EXPR_CONDI paraF INSTR mcENDO •

    $default  reduce using rule 49 (Boucle)


State 138

   73 ListeRest: virgule identificateur ListeRest •

    $default  reduce using rule 73 (ListeRest)


State 139

   51 Equivalence: PartageMemoire paraO Liste paraF virgule paraO • Liste paraF point_virgule

    identificateur  shift, and go to state 54

    Liste  go to state 148


State 140

   50 Appel: identificateur mcROUTINE paraO Liste paraF point_virgule •

    $default  reduce using rule 50 (Appel)


State 141

   29 APPEL_FONC: mcCALL identificateur paraO Liste • point_virgule

    point_virgule  shift, and go to state 149


State 142

   37 MATH_VAR1: OPER IDFI MATH_VAR1 •

    $default  reduce using rule 37 (MATH_VAR1)


State 143

   40 CHAINE_STRING1: OPER IDFI_CHAR CHAINE_STRING1 •

    $default  reduce using rule 40 (CHAINE_STRING1)


State 144

   12 DIMENSION_REST: virgule identificateur DECLARATIONS1 •

    $default  reduce using rule 12 (DIMENSION_REST)


State 145

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur • eq INTEGER mcENDR Fonction

    eq  shift, and go to state 150


State 146

   47 ES: mcWRITE paraO chaine virgule Liste virgule chaine • paraF point_virgule

    paraF  shift, and go to state 151


State 147

   48 Condition: mcIF paraO EXPR_CONDI paraF mcTHEN INSTR mcENDIF •

    $default  reduce using rule 48 (Condition)


State 148

   51 Equivalence: PartageMemoire paraO Liste paraF virgule paraO Liste • paraF point_virgule

    paraF  shift, and go to state 152


State 149

   29 APPEL_FONC: mcCALL identificateur paraO Liste point_virgule •

    $default  reduce using rule 29 (APPEL_FONC)


State 150

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur eq • INTEGER mcENDR Fonction

    INTEGER  shift, and go to state 153


State 151

   47 ES: mcWRITE paraO chaine virgule Liste virgule chaine paraF • point_virgule

    point_virgule  shift, and go to state 154


State 152

   51 Equivalence: PartageMemoire paraO Liste paraF virgule paraO Liste paraF • point_virgule

    point_virgule  shift, and go to state 155


State 153

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur eq INTEGER • mcENDR Fonction

    mcENDR  shift, and go to state 156


State 154

   47 ES: mcWRITE paraO chaine virgule Liste virgule chaine paraF point_virgule •

    $default  reduce using rule 47 (ES)


State 155

   51 Equivalence: PartageMemoire paraO Liste paraF virgule paraO Liste paraF point_virgule •

    $default  reduce using rule 51 (Equivalence)


State 156

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR • Fonction

    mcINTEGER    shift, and go to state 1
    mcREAL       shift, and go to state 2
    mcCHARACTER  shift, and go to state 3
    mcLOGICAL    shift, and go to state 4
    mcPROGRAM    shift, and go to state 5

    Fonction      go to state 157
    Programme_pr  go to state 7
    type          go to state 8


State 157

    1 Fonction: type mcROUTINE identificateur paraO Liste DECLARATIONS INSTR identificateur eq INTEGER mcENDR Fonction •

    $default  reduce using rule 1 (Fonction)
